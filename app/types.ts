import type { LoaderFunction } from "@remix-run/node";
import type { AssetsManifest } from "@remix-run/server-runtime/entry";
import type {
  DataFunctionArgs,
  EntryRouteModule,
  RouteModules,
} from "@remix-run/server-runtime/routeModules";

export interface SitemapEntry {
  route: string;
  lastmod?: string;
  changefreq?:
    | "always"
    | "hourly"
    | "daily"
    | "weekly"
    | "monthly"
    | "yearly"
    | "never";
  priority?: 0.0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1.0;
}

type SiteMapEntries = Array<SitemapEntry | null> | null;

export interface CapraHandle {
  getSitemapEntries?: (
    request: Request,
  ) => Promise<SiteMapEntries> | SiteMapEntries;
}

export interface CapraLoadContext {
  netlifyGraphToken?: string; // raw authentication token to use with Netlify Graph
  clientNetlifyGraphAccessToken?: string; // For use with JWTs generated by `netlify-graph-auth`.
  netlifyGraphSignature?: string; // a signature for subscription events. Will be present if a secret is set.
  routeModules: RouteModules<EntryRouteModule>;
  manifest: AssetsManifest;
}

export type LoaderFunctionWithContext = (
  args: Omit<DataFunctionArgs, "context"> & {
    context: CapraLoadContext;
  },
) => ReturnType<LoaderFunction>;
